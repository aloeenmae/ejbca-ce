user  nginx;
    worker_processes  1;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }

        # Track client certificates fingerprints
	    map $ssl_client_fingerprint $reject {
    	    default	 1;
    	    1111111111111111 0; # Add client cert fingerprint here
	    }        

        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" '
                          '"SSL: $ssl_client_verify / $ssl_client_s_dn" '
                          '"Cert fingerprint: $ssl_client_fingerprint"';
        access_log  /var/log/nginx/access.log  main;
        sendfile        on;
        keepalive_timeout  65;

    # HTTP (port 80) server 
    server {
        listen 80;
    
        server_tokens off;

        # Redirect HTTP request to HTTPS
        location / {
            return 301 https://$host$request_uri;
            }

        # Allow EJBCA application level healthcheck over plain HTTP
        location = /ejbca/publicweb/healthcheck/ejbcahealth {
            proxy_pass  http://ejbca:8081;
            }
    }

    # HTTPS 
    server {
        listen 443 ssl;

        server_tokens off;

        if ($http_x_forwarded_proto = '') {
            set $http_x_forwarded_proto  $scheme;
        }

        ssl_certificate     /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        ssl_session_cache shared:SSL:1m;

        # Mozilla Intermediate configuration    
        ssl_protocols          TLSv1.2 TLSv1.3;
        ssl_ciphers            ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

        # Set client verification optional so not authenticated users sees 403
        ssl_verify_client       optional;

        # trusted client certificate authorities
        ssl_client_certificate  /etc/nginx/ssl/ca.pem;

        # Set the verification depth on the chain
        ssl_verify_depth        1;
    
        # restrict methods
        if ($request_method !~ ^(GET|POST|PUT|HEAD)$) {
            return '405';
        }

        location / {

        # Check that TLS verification is OK, otherwise return 403
        if ($ssl_client_verify != SUCCESS) {
            return 403;
        }

        # Allow only client certificates with the correct fingerprints
        if ($reject) {
            return 403;
        }

        proxy_pass                              http://ejbca:8082/;
        proxy_set_header Host                   $http_host;
        proxy_http_version                      1.1;
        proxy_pass_header                       Server;


        # Proxy headers
        proxy_set_header Upgrade                $http_upgrade;
        proxy_set_header Connection             $connection_upgrade;
        proxy_set_header X-Real-IP              $remote_addr;
        proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto      $scheme;
        proxy_set_header SSL_CLIENT_CERT        $ssl_client_verify;
        proxy_set_header X-Forwarded-Host       $host;
        }

    }
}

